<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 55bc7fbe03b272a437c625027e985f64b6739003
=======
>>>>>>> cea92c3ce218a5c81cfcf746bd95a405f2d98cce
# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
<<<<<<< HEAD
<<<<<<< HEAD
=======
# Ignore Terraform state files
*.tfstate
*.tfstate.backup

# Ignore Terraform directory
.terraform/

# Ignore override files
>>>>>>> 5bf1ff1 (Cleaned up embedded repo and added Terraform project files)
=======
>>>>>>> 55bc7fbe03b272a437c625027e985f64b6739003
=======
>>>>>>> cea92c3ce218a5c81cfcf746bd95a405f2d98cce
override.tf
override.tf.json
*_override.tf
*_override.tf.json

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 55bc7fbe03b272a437c625027e985f64b6739003
=======
>>>>>>> cea92c3ce218a5c81cfcf746bd95a405f2d98cce
# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
<<<<<<< HEAD
<<<<<<< HEAD
=======
# Ignore CLI configuration
.terraform.lock.hcl

# Ignore sensitive variable files
terraform.tfvars
>>>>>>> 5bf1ff1 (Cleaned up embedded repo and added Terraform project files)
=======
>>>>>>> 55bc7fbe03b272a437c625027e985f64b6739003
=======
>>>>>>> cea92c3ce218a5c81cfcf746bd95a405f2d98cce
